import os
import sys
# sys.path.append("D:\\temp\\Experiment Python")
import psnr
import argparse
import transcoder
import readconfig
import pandas as pd
import graphGeneration

dfVideo, dfCodec, dfBitrate = None, None, None

def parserHandler():
    parser = argparse.ArgumentParser(usage="codec-compare.py [-h] [-c CONFIG_FILE] {log, graph, clean} <options>")
    parser.add_argument("-c", type=str, help="Specify the config file")

    subparsers = parser.add_subparsers(dest="command", metavar="")

    logParser = subparsers.add_parser("log", help="Generate log")
    logParser.add_argument("-noskip", action="store_true", help="Not skipping files already existed, regenerate them")
    logParser.add_argument("-export", type=str, help="Export .pkl files, can be merged with other .pkl files")

    graphParser = subparsers.add_parser("graph", help="Show PSNR plot")
    graphParser.add_argument("-save", type=str, help="Save picture to [PATH]")

    cleanParser = subparsers.add_parser("clean", help="Remove working folder")

    mergeParser = subparsers.add_parser("merge", help="Merge multiple .pkl files generated by the program and export to ./data.pkl")
    mergeParser.add_argument("-i", nargs="+", help="Specify path to .pkl files")

    editParser = subparsers.add_parser("edit", help="Merge multiple .pkl files generated by the program and export to ./data.pkl")
    editParser.add_argument("-i", type=str, help="pkl file to be edited")
    editParser.add_argument("-list", action="store_true", help="list labels in the .pkl file")
    editParser.add_argument("-rename", nargs=2, help="<label to be changed> <new label name>")
    editParser.add_argument("-delete", type=str, help="label to be deleted")

    args = parser.parse_args()
    return args

def generateLog(noskip, path):
    if noskip:
        clean('retain reference')
        generateLog(False, path)
    else:
        videoData = transcoder.videosGenerator(dfVideo, dfCodec, dfBitrate)
        psnr.generateLogs(videoData)
        psnr.insertPSNRToDF(videoData)
        videoData.to_pickle(path)

def clean(scope):
    nameList = dfVideo['Name']
    codecList = dfCodec['Codec']
    if scope == 'all':
        readconfig.deleteFolder(os.getcwd())
    elif scope == 'retain reference':
        readconfig.deleteFolder(os.path.join(os.getcwd(), 'logs'))
        for name in nameList:
            for codec in codecList:
                folder = name + '_' + codec
                readconfig.deleteFolder(os.path.join(os.getcwd(), folder)) 

def showGraph(save, path):
    graphingDF = pd.read_pickle('data.pkl')
    graphGeneration.generateGraph(graphingDF, save, path)

def mergeDF(pklPaths):
    result = None
    for pklFile in pklPaths:
        if os.path.exists(pklFile):
            df = pd.read_pickle(pklFile)
            result = pd.concat([result, df], axis=0)
        else:
            sys.exit(f'{pklFile} doesn\'t exist')
    print(result)
    result.to_pickle('data.pkl')

def updateLabel(row, original, new):
    if row['Label'] == original:
        oldFolderName = row['Reference Name'] + '_' + original
        newFolderName = row['Reference Name'] + '_' + new
        print(oldFolderName)
        if os.path.exists(oldFolderName):
            os.rename(oldFolderName, newFolderName)
        fileName = os.path.basename(row['Current Path'])
        row['Current Path'] = os.path.join(newFolderName, fileName)
        row['Label'] = new
        oldLogPath = row['Log Location']
        desiredBitrate = oldLogPath.split('_')[-1]
        newLogPath = os.path.join('logs', newFolderName + '_' + desiredBitrate)
        row['Log Location'] = newLogPath
        if os.path.exists(oldLogPath):
            os.rename(oldLogPath, newLogPath)
    return row
    
def main():
    args = parserHandler()
    global dfVideo, dfCodec, dfBitrate
    if args.command == 'clean':
        if args.c:
            dfVideo, dfCodec, dfBitrate = readconfig.generateConfigDF(args.c)
            clean('retain reference')
            sys.exit('Generated files deleted')
        else:
            sys.exit('Please specify the config file with -c')

    if args.command == 'log':
        if args.c:
            dfVideo, dfCodec, dfBitrate = readconfig.generateConfigDF(args.c)
            generateLog(args.noskip, args.export or 'data.pkl')
        else:
            sys.exit('Please specify the config file with -c')

    if args.command == 'graph':
        if args.save:
            showGraph(True, args.save)
        else:
            showGraph(False, None)

    if args.command == 'merge':
        mergeDF(args.i)

    if args.command == 'edit':
        if args.i:
            data = pd.read_pickle(args.i)
        else:
            sys.exit(f'No file named {args.i} exists')
        if args.list:
            print(data['Label'].unique())
        elif args.rename:
            originalName, newName = args.rename
            data = data.apply(updateLabel, axis=1, args=(originalName, newName))
            data.to_pickle('data.pkl')
            if args.c:
                readconfig.renameLabel(originalName, newName, args.c)
        elif args.delete:
            data = data[data['Label'] != args.delete]
            data.to_pickle('data.pkl')
            if args.c:
                readconfig.renameLabel(args.delete, None, args.c)

if __name__ == "__main__":
    main()
